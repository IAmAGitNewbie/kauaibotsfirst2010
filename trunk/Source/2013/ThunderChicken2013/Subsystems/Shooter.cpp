// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.



#include "Shooter.h"
#include "../Robotmap.h"
#include "../Robot.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
Shooter::Shooter() : Subsystem("Shooter") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	motor = RobotMap::shootermotor;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
	
}

void Shooter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//setDefaultCommand(new MySpecialCommand());
	SetDefaultCommand(new SetShooterRPM());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Actual shooter speed varies greatly as a function of
// battery voltage.  Therefore, scale the speed by the 
// inverse of the battery voltage.  This should help keep the 
// speed similar at different battery levels.

void Shooter::SetShooterSpeed(double speed){
	float battery_voltage = DriverStation::GetInstance()->GetBatteryVoltage();
	if ( battery_voltage < MIN_BATTERY_VOLTAGE )
	{
		battery_voltage = MIN_BATTERY_VOLTAGE;
	}
	else if ( battery_voltage > MAX_BATTERY_VOLTAGE )
	{
		battery_voltage = MAX_BATTERY_VOLTAGE;
	}
	
	speed = speed * (MIN_BATTERY_VOLTAGE / battery_voltage);
	
	motor->Set(speed);
}

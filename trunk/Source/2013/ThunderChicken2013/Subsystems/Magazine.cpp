// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.




#include "Magazine.h"
#include "../Robotmap.h"
#include "../Robot.h"
Magazine::Magazine() : Subsystem("Magazine") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	trigger = RobotMap::magazinetrigger;
	lifter = RobotMap::magazinelifter;
	firsbee_counter = RobotMap::magazinefirsbee_counter;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Magazine::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	SetDefaultCommand(new FireFrisbee());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

int Magazine::CheckFrizbees() {
	switch(firsbee_counter)
		{
			default:
				return(0);
			case 1:
				return(1);
			case 2:
				return(2);
			case 3:
				return(3);
			case 4:
				return(4);
		}
}

bool CheckLoadState(){
	if(lifter->Get()=kForward) return(TRUE);
	else if(lifter->Get()=kReverse) return(FALSE);
	else return(FALSE);
}

bool CheckFireState(){
	if(trigger->Get()=kForward) return(TRUE);
	else if(trigger->Get()=kReverse) return(FALSE);
	else return(FALSE);
}

void SetLoadState(bool x){
	if(x) lifter->Set(kForward);
	else if(!x) lifter->Set(kReverse);
}

void SetFireState(bool x){
	if(x) trigger->Set(kForward);
	else if(!x) trigger->Set(kReverse);
}

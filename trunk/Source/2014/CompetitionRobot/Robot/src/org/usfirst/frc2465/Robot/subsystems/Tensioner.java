// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.Robot.subsystems;

import org.usfirst.frc2465.Robot.RobotMap;
import org.usfirst.frc2465.Robot.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;

import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc2465.Robot.RobotPreferences;

/**
 *
 */
public class Tensioner extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftSC = RobotMap.tensionerLeftSC;
    DigitalInput leftMin = RobotMap.tensionerLeftMin;
    DigitalInput leftMax = RobotMap.tensionerLeftMax;
    ProximitySensor leftDistance = RobotMap.tensionerLeftDistance;
    SpeedController rightSC = RobotMap.tensionerRightSC;
    Relay lock = RobotMap.tensionerLock;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static double TENSIONER_DEFAULT_DISTANCE_INCHES = RobotPreferences.getTensionerDefaultDistanceInches();
    public static double TENSIONER_MIN_DISTANCE_INCHES = RobotPreferences.getTensionerMinDistanceInches();
    public static double TENSIONER_MAX_DISTANCE_INCHES = RobotPreferences.getTensionerMaxDistanceInches();
    public static double TENSIONER_MIN_MOTOR_SPEED = -1;
    public static double TENSIONER_MAX_MOTOR_SPEED = 1;    
    
    public Tensioner() {
        super(  "Tensioner",
                RobotPreferences.getTensionerP(),
                RobotPreferences.getTensionerI(),
                RobotPreferences.getTensionerD());
        getPIDController().setContinuous(false);
        getPIDController().setInputRange(TENSIONER_MIN_DISTANCE_INCHES, TENSIONER_MAX_DISTANCE_INCHES);
        getPIDController().setOutputRange(TENSIONER_MIN_MOTOR_SPEED, TENSIONER_MAX_MOTOR_SPEED);
        setSetpoint(TENSIONER_DEFAULT_DISTANCE_INCHES);
        enable();
        
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    // Returns current distance in inches
    
    protected double returnPIDInput() {
        
        double x = leftDistance.getDistanceMM();
        
        x = x * 0.0393701; //convert mm to inches
        
        return x;
    }

    // Controls output of both left and right motors
    
    protected void usePIDOutput(double d) {
        leftSC.set(d);
        rightSC.set(d);
    }
}


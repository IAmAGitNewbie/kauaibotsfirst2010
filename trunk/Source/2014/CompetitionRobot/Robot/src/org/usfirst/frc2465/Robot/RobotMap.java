// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2465.Robot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANJaguar driveLeftFrontSC;
    public static CANJaguar driveLeftRearSC;
    public static CANJaguar driveRightFrontSC;
    public static CANJaguar driveRightRearSC;
    public static RobotDrive driveRobotDrive;
    public static AnalogChannel ankleAngleSensor;
    public static DigitalInput ankleAngleMin;
    public static DigitalInput ankleAngleMax;
    public static SpeedController ankleAngleSC;
    public static SpeedController tensionerLeftSC;
    public static DigitalInput tensionerLeftMin;
    public static DigitalInput tensionerLeftMax;
    public static AnalogChannel tensionerLeftDistance;
    public static SpeedController tensionerRightSC;
    public static DigitalInput tensionerRightMin;
    public static DigitalInput tensionerRightMax;
    public static AnalogChannel tensionerRightDistance;
    public static Solenoid tensionerLock;
    public static Solenoid tensionerUnlock;
    public static SpeedController armsLeftElbowSC;
    public static DigitalInput armsLeftElbowMin;
    public static DigitalInput armsLeftElbowMax;
    public static AnalogChannel armsLeftElbowSensor;
    public static SpeedController armsRightElbowSC;
    public static DigitalInput armsRightElbowMin;
    public static DigitalInput armsRightElbowMax;
    public static AnalogChannel armsRightElbowSensor;
    public static DoubleSolenoid armsShoulderSolenoid;
    public static AnalogChannel wallRangerSensor;
    public static AnalogChannel ballRangerSensor;
    public static Compressor airCompressor;
    public static Relay airRelay;
    public static DigitalInput airPressureSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        try { 
            driveLeftFrontSC = new CANJaguar(2);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveLeftRearSC = new CANJaguar(3);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveRightFrontSC = new CANJaguar(4);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveRightRearSC = new CANJaguar(5);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        driveRobotDrive = new RobotDrive(driveLeftFrontSC, driveLeftRearSC,
              driveRightFrontSC, driveRightRearSC);
	
        driveRobotDrive.setSafetyEnabled(true);
        driveRobotDrive.setExpiration(0.1);
        driveRobotDrive.setSensitivity(0.5);
        driveRobotDrive.setMaxOutput(1.0);
        ankleAngleSensor = new AnalogChannel(1, 1);
	LiveWindow.addSensor("Ankle", "AngleSensor", ankleAngleSensor);
        
        ankleAngleMin = new DigitalInput(1, 1);
	LiveWindow.addSensor("Ankle", "AngleMin", ankleAngleMin);
        
        ankleAngleMax = new DigitalInput(1, 2);
	LiveWindow.addSensor("Ankle", "AngleMax", ankleAngleMax);
        
        ankleAngleSC = new Talon(1, 7);
	LiveWindow.addActuator("Ankle", "AngleSC", (Talon) ankleAngleSC);
        
        tensionerLeftSC = new Talon(1, 1);
	LiveWindow.addActuator("Tensioner", "LeftSC", (Talon) tensionerLeftSC);
        
        tensionerLeftMin = new DigitalInput(1, 3);
	LiveWindow.addSensor("Tensioner", "LeftMin", tensionerLeftMin);
        
        tensionerLeftMax = new DigitalInput(1, 4);
	LiveWindow.addSensor("Tensioner", "LeftMax", tensionerLeftMax);
        
        tensionerLeftDistance = new AnalogChannel(1, 2);
	LiveWindow.addSensor("Tensioner", "LeftDistance", tensionerLeftDistance);
        
        tensionerRightSC = new Talon(1, 2);
	LiveWindow.addActuator("Tensioner", "RightSC", (Talon) tensionerRightSC);
        
        tensionerRightMin = new DigitalInput(1, 5);
	LiveWindow.addSensor("Tensioner", "RightMin", tensionerRightMin);
        
        tensionerRightMax = new DigitalInput(1, 6);
	LiveWindow.addSensor("Tensioner", "RightMax", tensionerRightMax);
        
        tensionerRightDistance = new AnalogChannel(1, 3);
	LiveWindow.addSensor("Tensioner", "RightDistance", tensionerRightDistance);
        
        tensionerLock = new Solenoid(1, 1);
	LiveWindow.addActuator("Tensioner", "Lock", tensionerLock);
        
        tensionerUnlock = new Solenoid(1, 2);
	LiveWindow.addActuator("Tensioner", "Unlock", tensionerUnlock);
        
        armsLeftElbowSC = new Talon(1, 3);
	LiveWindow.addActuator("Arms", "LeftElbowSC", (Talon) armsLeftElbowSC);
        
        armsLeftElbowMin = new DigitalInput(1, 7);
	LiveWindow.addSensor("Arms", "LeftElbowMin", armsLeftElbowMin);
        
        armsLeftElbowMax = new DigitalInput(1, 8);
	LiveWindow.addSensor("Arms", "LeftElbowMax", armsLeftElbowMax);
        
        armsLeftElbowSensor = new AnalogChannel(1, 4);
	LiveWindow.addSensor("Arms", "LeftElbowSensor", armsLeftElbowSensor);
        
        armsRightElbowSC = new Talon(1, 4);
	LiveWindow.addActuator("Arms", "RightElbowSC", (Talon) armsRightElbowSC);
        
        armsRightElbowMin = new DigitalInput(1, 9);
	LiveWindow.addSensor("Arms", "RightElbowMin", armsRightElbowMin);
        
        armsRightElbowMax = new DigitalInput(1, 10);
	LiveWindow.addSensor("Arms", "RightElbowMax", armsRightElbowMax);
        
        armsRightElbowSensor = new AnalogChannel(1, 5);
	LiveWindow.addSensor("Arms", "RightElbowSensor", armsRightElbowSensor);
        
        armsShoulderSolenoid = new DoubleSolenoid(1, 3, 4);      
	
        
        wallRangerSensor = new AnalogChannel(1, 6);
	LiveWindow.addSensor("WallRanger", "Sensor", wallRangerSensor);
        
        ballRangerSensor = new AnalogChannel(1, 7);
	LiveWindow.addSensor("BallRanger", "Sensor", ballRangerSensor);
        
        airCompressor = new Compressor(1, 13, 1, 1);
	
        
        airRelay = new Relay(1, 2);
	LiveWindow.addActuator("Air", "Relay", airRelay);
        
        airPressureSwitch = new DigitalInput(1, 14);
	LiveWindow.addSensor("Air", "PressureSwitch", airPressureSwitch);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}

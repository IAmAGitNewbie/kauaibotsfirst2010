// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.Robot.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2465.Robot.Robot;

/**
 *
 */
public class  StickDrive extends Command {

    public StickDrive() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	requires(Robot.drive);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    static final double DEADZONE = .025;
    
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        Joystick driver = Robot.oi.driverJoystick;
        double vX = driver.getX();
        vX = vX * -1;   // invert
        double vY = driver.getY();
        vY = vY * -1;   // invert
        double vRot = driver.getTwist();
        vRot = vRot * -1;   // invert
        
        // If in deadzone, set values to 0
        if (Math.abs(vX) < DEADZONE) vX = 0;
        if (Math.abs(vY) < DEADZONE) vY = 0;
        if (Math.abs(vRot) < DEADZONE) vRot = 0;
                                                                                                        
        // Robot.drive.doMecanum(vX,vY,vRot);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

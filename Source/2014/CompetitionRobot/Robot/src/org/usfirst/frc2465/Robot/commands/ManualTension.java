// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.Robot.commands;

import com.sun.squawk.util.MathUtils;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2465.Robot.Robot;
import org.usfirst.frc2465.Robot.RobotPreferences;

/**
 *
 */
public class  ManualTension extends Command {

    public ManualTension() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	requires(Robot.tensioner);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        
        Joystick stick = Robot.oi.shooterJoystick;
        double throttle = stick.getThrottle();

        // map from stick range (-1 to 1) to tension range (min-max)
      
        double throttle_percent = (throttle + 2.0) / 2.0;
        
        // Throttle is now a value from 0 to 1
        
        double tension_range = RobotPreferences.getTensionerMaxVolts() -
                                RobotPreferences.getTensionerMinVolts();
        
        double tension_min = RobotPreferences.getTensionerMinVolts();
        
        // mx+b
        
        double tension_level = (throttle_percent * tension_range) + tension_min;        
        Robot.tensioner.setSetpoint(tension_level);
        if ( !Robot.tensioner.isEnabled() && !Robot.tensioner.onTarget()) {
            Robot.tensioner.enable();
        }
        else {
            if ( Robot.tensioner.onTarget()) {
                Robot.tensioner.disable();
            }
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.tensioner.disable();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        Robot.tensioner.disable();
    }
}

// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.Robot.subsystems;

import org.usfirst.frc2465.Robot.RobotMap;
import org.usfirst.frc2465.Robot.commands.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Arms extends Subsystem implements PIDSource {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public SpeedController sC = RobotMap.armsSC;
    DigitalInput min = RobotMap.armsMin;
    DigitalInput max = RobotMap.armsMax;
    AnalogChannel sensor = RobotMap.armsSensor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        ratio = (max_theta - min_theta) / (max_volt - min_volt);
    }
    public double getAngle() {
        return
            ratio * (sensor.getAverageVoltage() - min_volt) + min_theta;
                
    }
    double ratio;
    public static final double max_theta = 110;
    public static final double min_theta = 0;
    final double max_volt = 1.6;
    final double min_volt = 3.1;

    public double pidGet() {
      return getAngle();  
    }
}


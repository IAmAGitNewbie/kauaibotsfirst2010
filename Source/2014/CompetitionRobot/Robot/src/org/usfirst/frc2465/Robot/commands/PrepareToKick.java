// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.Robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2465.Robot.Robot;
import org.usfirst.frc2465.Robot.RobotPreferences;
import org.usfirst.frc2465.Robot.subsystems.Kicker;
import org.usfirst.frc2465.Robot.subsystems.Tensioner;

/**
 *
 */
public class  PrepareToKick extends Command {


    final int kStateInitial = 0;
    final int kStatePreparingTrigger = 1;
    final int kStateDetensioning = 2;
    final int kStateLatchingLeg = 3;
    final int kStateDone = 4;
    
    int state;
    
    public PrepareToKick() {
        requires(Robot.tensioner);
        requires(Robot.kicker);
        
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        state = kStateInitial;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        switch ( state ) {
            case kStateInitial:
                if ( !Robot.kicker.isTriggerReady() ) {
                    Robot.kicker.startTriggerMotor();
                    state = kStatePreparingTrigger;
                }
                else {
                    state = kStateDetensioning;
                }
                break;
            case kStatePreparingTrigger:
                if ( Robot.kicker.isTriggerReady() ) {
                    Robot.kicker.stopTriggerMotor();
                    state = kStateDetensioning;
                }
                break;
            case kStateDetensioning:
                if ( !Robot.tensioner.isDetensioned() ) {
                    Robot.tensioner.setSetpoint(
                            RobotPreferences.getTensionerSlackVolts());
                    Robot.tensioner.enable();
                } else {
                    Robot.tensioner.disable();
                    state = kStateLatchingLeg;
                }
                break;
            case kStateLatchingLeg:
                if ( !Robot.kicker.isLegLatchedAndRetractorReady() ) {
                    Robot.kicker.startLegRetractor();
                } else {
                    Robot.kicker.stopLegRetractor();
                    state = kStateDone;
                }
                break;
            default:
                break;
        }
    }
    

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return ( state == kStateDone );
    }
    

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        Robot.kicker.stopLegRetractor();
        Robot.kicker.stopTriggerMotor();
    }
}

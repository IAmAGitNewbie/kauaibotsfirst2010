// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.Robot.subsystems;

import org.usfirst.frc2465.Robot.RobotMap;
import org.usfirst.frc2465.Robot.commands.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Leg extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput stop = RobotMap.legStop;
    Relay motor = RobotMap.legMotor;
    Relay lock = RobotMap.tensionerLock;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    int state;
    
    public static final int kStateUnlatched       = 0; 
    public static final int kStateMoving          = 1; 
    public static final int kStateLatched         = 2;
    
    public void Leg() {
        
        motor.setDirection(Relay.Direction.kForward);
        lock.setDirection(Relay.Direction.kForward);
        motor.set(Relay.Value.kOff);
        lock.set(Relay.Value.kOff);

    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public int getState() {
        
        if ( stop.get() ) {
            return kStateLatched;
        }
        else if ( motor.get() == Relay.Value.kForward ) {
            return kStateMoving;
        }
        else {
            return kStateUnlatched;
        }

    }
    
    public boolean requestState( int new_state ) {
        
        int current_state = getState();
        boolean success = false;
        if ( new_state == kStateUnlatched ) {
            if ( current_state == kStateLatched ) {
                
                motor.setDirection(Relay.Direction.kForward);
                success = true;
            }
        }
        else if ( new_state == kStateLatched ) {
            if ( state == kStateUnlatched ) {
                lock.setDirection(Relay.Direction.kForward);
                success = true;
            }
        }
        return success;
    }
    
}

